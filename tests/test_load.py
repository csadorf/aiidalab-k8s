# Generated by Selenium IDE
import os
from hashlib import sha256
from random import randint
from time import sleep
import uuid

import pytest
from selenium.webdriver.common.by import By
from requests import HTTPError

from jhub import JupyterHub


SALT = '31182abfed3a4120e9a39b01e86bda2422347b9f82979dde64651b50db1b49f1'
NUM_TESTS = int(os.environ.get('TEST_NUMBER', '1'))


AIIDALAB_HOST = os.environ.get('AIIDALAB_HOST', 'http://localhost:8000')
JUPYTERHUB_API_TOKEN = os.environ.get('JUPYTERHUB_API_TOKEN', '')


@pytest.fixture(scope='session')
def session_token():
    return uuid.uuid4().hex[:8]


@pytest.fixture(scope='session')
def jupyter_hub():
    return JupyterHub(AIIDALAB_HOST, JUPYTERHUB_API_TOKEN)


@pytest.fixture(params=list(range(NUM_TESTS)))
def credentials(request, session_token):
    password = sha256((session_token + SALT + str(request.param)).encode('utf-8')).hexdigest()
    return dict(username=f'test-user-{session_token}-{request.param:03}', password=password)


@pytest.fixture
def user(jupyter_hub, credentials):
    with pytest.raises(HTTPError):
        jupyter_hub.users(credentials['username'])
    yield credentials
    sleep(randint(10, 20))
    try:
        jupyter_hub.users(credentials['username'])
    except HTTPError as error:
        if error.response.status_code == 404:
            pass  # user does not exist, safe to ignore
        else:
            raise
    else:
        jupyter_hub.stop_server(credentials['username'])
        for i in range(10):
            sleep(randint(3, 5))
            try:
                jupyter_hub.delete_user(credentials['username'])
            except HTTPError as error:
                if error.response.status_code == '400':
                    continue  # try again
                raise
            else:
                break


def test_testspawnuser(selenium, user):
    sleep(randint(1,10))
    selenium.get(f'{AIIDALAB_HOST}/hub/login')
    selenium.set_window_size(1440, 817)
    selenium.get_screenshot_as_file('screenshots/login.png')
    selenium.find_element(By.ID, "username_input").send_keys(user['username'])
    selenium.find_element(By.ID, "password_input").send_keys(user['password'])
    selenium.find_element(By.ID, "login_submit").click()
    selenium.find_element(By.XPATH, "//img[contains(@src,\'https://gitlab.com/QEF/q-e/raw/develop/logo.jpg\')]").click()
